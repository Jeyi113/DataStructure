## 2.2. What's the running time of the `binarySearch_2()` is N in Big-Oh representation, when the size of `list_in`? Explain why you think like that.

1. Write your Answer in the blank: 

   binarySearch_2() runs in O(log N)  

2. Explain your reason below:

  The running time on the list operation list[index] is O(1), and other code lines also have constant time (O(1)). 
  So we can consider the worst recursion count for this code to analyze the Big-O notation of this. 
  In this function, binarySearch_2(), the range of list index which is checked decreases in half when recursion occurs.
  At first call of the binarySearch_2(), the number of candidates that are going to be use in searching is N.
  And then, the second call of the functon, the number of candidates are reduced to almost N/2. (we don't consider the constants because it will be ignored in Big-O notation, since the term of N)
  After that, the third call of the function, the number of candidates are reduced to almost N/4.
  In the worst case, the function finally stops when there's no candidate data to check. If recursive function is called 'r'times after first execution,
  The candidate data is N/(2)^r. And this indicates that N/(2)^r < 1.
  So N < 2^r, which means r = log N + 1. 
  Therefore, the Big-O notation is O(log N).